[gd_scene load_steps=36 format=2]

[ext_resource path="res://Scenes/UI/ingame_UI.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scenes/World/Character.tscn" type="PackedScene" id=2]
[ext_resource path="res://Asset/Material/Player/TeamRed/player_body_red.material" type="Material" id=3]
[ext_resource path="res://Asset/Material/Player/TeamRed/player_hat_red.material" type="Material" id=4]
[ext_resource path="res://Asset/Material/Player/TeamGreen/player_body_green.material" type="Material" id=5]
[ext_resource path="res://Asset/Material/Player/TeamGreen/player_hat_green.material" type="Material" id=6]
[ext_resource path="res://Asset/Material/Player/TeamOrange/player_body_orange.material" type="Material" id=7]
[ext_resource path="res://Asset/Material/Player/TeamOrange/player_hat_orange.material" type="Material" id=8]
[ext_resource path="res://Asset/Material/Player/TeamBlue/player_body.material" type="Material" id=9]
[ext_resource path="res://Asset/Material/Player/TeamBlue/player_hat.material" type="Material" id=10]
[ext_resource path="res://Scenes/World/Hand.tscn" type="PackedScene" id=11]
[ext_resource path="res://Asset/Model/Level1/figurine.tscn" type="PackedScene" id=12]
[ext_resource path="res://Asset/Model/Level1/background.tscn" type="PackedScene" id=13]
[ext_resource path="res://Asset/Model/Level1/stage.tscn" type="PackedScene" id=14]
[ext_resource path="res://Asset/Model/Level1/candy_cane.tscn" type="PackedScene" id=15]
[ext_resource path="res://Asset/Model/Level1/background_gifts.tscn" type="PackedScene" id=16]
[ext_resource path="res://Asset/Model/Level1/background_shrub.tscn" type="PackedScene" id=17]
[ext_resource path="res://Asset/Model/Level1/weihnachtspyramide.tscn" type="PackedScene" id=18]
[ext_resource path="res://Asset/Model/Level1/christmas_bag.tscn" type="PackedScene" id=19]

[sub_resource type="GDScript" id=1]
script/source = "#########################################################
# Copyright (C) 2019-2020 MVP Good Games Easy UG (haftungsbeschr√§nkt) - All Rights Reserved
# E-Mail: info@mvpggez.com
# 
# This file is part of the game \"Punchgiving\".
# Full source code is available at https://github.com/mvpggez/PunchGiving
#########################################################

extends Spatial

func int_to_str(i):
	if i < 10:
		return \"0\"+str(i)
	else:
		return str(i)

func _process(delta):
	$ingame_UI/TextureRect/Label.text = str(int(($Timer.time_left/60)))+\":\"+int_to_str(int($Timer.time_left)%60)
	if has_node(\"Character1\"):
		$ingame_UI/HBoxContainer/Gift_Count_Red/Label.text = str($Character1.score)
		$ingame_UI/HBoxContainer/Gift_Count_Red/NameContainer/MarginContainer/Name.text = $Character1.character_name
	if has_node(\"Character2\"):
		$ingame_UI/HBoxContainer/Gift_Count_Green/Label.text = str($Character2.score)
		$ingame_UI/HBoxContainer/Gift_Count_Green/NameContainer/MarginContainer/Name.text = $Character2.character_name
	if has_node(\"Character3\"):
		$ingame_UI/HBoxContainer/Gift_Count_Orange/Label.text = str($Character3.score)
		$ingame_UI/HBoxContainer/Gift_Count_Orange/NameContainer/MarginContainer/Name.text = $Character3.character_name
	if has_node(\"Character4\"):
		$ingame_UI/HBoxContainer/Gift_Count_Blue/Label.text = str($Character4.score)
		$ingame_UI/HBoxContainer/Gift_Count_Blue/NameContainer/MarginContainer/Name.text = $Character4.character_name
	update_ui()
		
func update_ui():
	if has_node(\"Character1\"):
		$ingame_UI/HBoxContainer/Gift_Count_Red.show()
	else:
		$ingame_UI/HBoxContainer/Gift_Count_Red.hide()
	if has_node(\"Character2\"):
		$ingame_UI/HBoxContainer/Gift_Count_Green.show()
	else:
		$ingame_UI/HBoxContainer/Gift_Count_Green.hide()
	if has_node(\"Character3\"):
		$ingame_UI/HBoxContainer/Gift_Count_Orange.show()
	else:
		$ingame_UI/HBoxContainer/Gift_Count_Orange.hide()
	if has_node(\"Character4\"):
		$ingame_UI/HBoxContainer/Gift_Count_Blue.show()
	else:
		$ingame_UI/HBoxContainer/Gift_Count_Blue.hide()
		
func end_round():
	$ingame_UI/WinContainerBackground.visible = true
	$ingame_UI/WinContainer.visible = true
	$ingame_UI.set_win_message(\"Time's up!\")
	var score_information = []
	for character in get_tree().get_nodes_in_group(\"character\"):
		score_information.append([character.score, character.character_name, character.character_id])
	$ingame_UI.set_score_information(score_information)
	get_tree().paused = true
	
	
func _on_Timer_timeout():
	end_round()
	pass
	



func _on_ingame_UI_mainmenu():
	get_tree().paused = false
	get_parent().back_to_menu()


func _on_ingame_UI_restart():
	get_tree().paused = false
	get_parent().restart()
"

[sub_resource type="BoxShape" id=2]
extents = Vector3( 5, 1, 1 )

[sub_resource type="SpatialMaterial" id=3]
albedo_color = Color( 0.713726, 0, 0, 1 )

[sub_resource type="CubeMesh" id=4]
material = SubResource( 3 )
size = Vector3( 10, 2, 2 )

[sub_resource type="ProceduralSky" id=5]
sky_top_color = Color( 1, 1, 1, 1 )
sky_horizon_color = Color( 0, 0, 0, 1 )
ground_bottom_color = Color( 0, 0, 0, 1 )
ground_horizon_color = Color( 0, 0, 0, 1 )
sun_color = Color( 1, 0.972549, 0.737255, 1 )
sun_energy = 10.55

[sub_resource type="Environment" id=6]
background_mode = 3
background_sky = SubResource( 5 )
ambient_light_color = Color( 0.160784, 0.160784, 0.160784, 1 )
ambient_light_sky_contribution = 0.0
glow_enabled = true
glow_levels/5 = false
glow_levels/6 = true
glow_intensity = 1.14
glow_strength = 1.27
glow_hdr_threshold = 0.73
adjustment_enabled = true
adjustment_brightness = 1.03
adjustment_contrast = 1.05
adjustment_saturation = 1.1

[sub_resource type="Curve3D" id=7]
_data = {
"points": PoolVector3Array( 0, 0, 0, 0, 0, 0, -59, 31, 0, 0, 0, 0, 0, 0, 0, 60, 31, 0 ),
"tilts": PoolRealArray( 0, 0 )
}
up_vector_enabled = false

[sub_resource type="Curve3D" id=8]
_data = {
"points": PoolVector3Array( 0, 0, 0, 0, 0, 0, 90, 3, 0, 0, 0, 0, 0, 0, 0, -80, 3, 0 ),
"tilts": PoolRealArray( 0, 0 )
}
up_vector_enabled = false

[sub_resource type="GDScript" id=9]
script/source = "extends Camera

#This camera follows that points of interest (player, presents) in a way, 
#that every point of interest is always visible (with a margin)
#to achieve that, the position and fov are changed on every frame
export var margin_factor = 1.1
export var translation_interpolation_factor = 0.05
export var fov_interpolation_factor = 0.05

func _process(delta):
	var points_of_interest = []
	for member in get_tree().get_nodes_in_group(\"points_of_interest\"):
		points_of_interest.append(member.translation)
	if points_of_interest.size() < 1:
		return
	var left = 999999999.0
	var right = -999999999.0
	var top = -999999999.0
	var bottom = 0.0
	for poi in points_of_interest:
		left = min(left, poi.x)
		right = max(right, poi.x)
		top = max(top, poi.y)
		bottom = min(bottom, poi.y)
	var poi_center = Vector3((left+right)/2, (top+bottom)/2, 0.0)
	
	if points_of_interest.size() < 1:
		fov = fov*(1-fov_interpolation_factor)+10*fov_interpolation_factor
	#interpolates the translation to center of pois
	translation = translation*(1-translation_interpolation_factor) + Vector3(poi_center.x, poi_center.y, translation.z)*translation_interpolation_factor
	#interpolates the fov to show all pois with a small margin
	var x_target_fov = atan((right-poi_center.x)*margin_factor/translation.z)/16*9
	var y_target_fov = atan((top-poi_center.y)*margin_factor/translation.z)
	fov = fov*(1-fov_interpolation_factor)+max(y_target_fov, x_target_fov)/PI/2*360*2*fov_interpolation_factor
	fov = min(fov, 30)
	fov = max(fov, 10)
	
	"

[sub_resource type="Shader" id=10]
code = "shader_type spatial;

uniform sampler2D gradient_grey: hint_albedo;
uniform sampler2D color_gradient: hint_albedo;



void fragment()
{
	vec2 uv_1 = vec2(UV.x,UV.y);
	vec2 uv_1_inv = vec2(1.0-UV.x,UV.y);
	vec2 uv_2 = vec2(UV.y,UV.x);
	vec2 uv_2_inv = vec2(1.0-UV.y,UV.x);
	
	vec3 bw_lr  = texture(gradient_grey, uv_1).rgb;
	vec3 bw_ud = texture(gradient_grey, uv_2).rgb;
	vec3 bw_rl = texture(gradient_grey, uv_1_inv).rgb;
	vec3 bw_du = texture(gradient_grey, uv_2_inv).rgb;
	vec3 mix_bw_channels = bw_lr * bw_ud * bw_rl * bw_du;
	vec3 bw_to_color = texture(color_gradient, vec2(mix_bw_channels.r, 0.0)).rgb;
	
	ALBEDO = mix_bw_channels;
	ALBEDO = bw_to_color;
	ALPHA = 1.0 - mix_bw_channels.r;
	EMISSION = bw_to_color * 0.2;
	
}
"

[sub_resource type="Gradient" id=11]
offsets = PoolRealArray( 0.00527705, 1 )
colors = PoolColorArray( 1, 0.609375, 0, 1, 1, 0.651367, 0.34375, 1 )

[sub_resource type="GradientTexture" id=12]
gradient = SubResource( 11 )
width = 256

[sub_resource type="Gradient" id=13]
offsets = PoolRealArray( 0, 0.171504, 0.540897 )
colors = PoolColorArray( 0.640625, 0.640625, 0.640625, 1, 0.765625, 0.765625, 0.765625, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=14]
gradient = SubResource( 13 )
width = 256

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 10 )
shader_param/gradient_grey = SubResource( 14 )
shader_param/color_gradient = SubResource( 12 )

[sub_resource type="PlaneMesh" id=16]
material = SubResource( 15 )

[node name="World" type="Spatial"]
script = SubResource( 1 )

[node name="ingame_UI" parent="." instance=ExtResource( 1 )]
pause_mode = 2

[node name="Floor" type="StaticBody" parent="."]
transform = Transform( 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )

[node name="CollisionShape" type="CollisionShape" parent="Floor"]
shape = SubResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="Floor"]
mesh = SubResource( 4 )
material/0 = null

[node name="Platform1" type="StaticBody" parent="."]
transform = Transform( 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 20, 0 )

[node name="CollisionShape" type="CollisionShape" parent="Platform1"]
shape = SubResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="Platform1"]
visible = false
mesh = SubResource( 4 )
material/0 = null

[node name="Platform2" type="StaticBody" parent="."]
transform = Transform( 2, 0, 0, 0, 1, 0, 0, 0, 1, 26, 10, 0 )

[node name="CollisionShape" type="CollisionShape" parent="Platform2"]
shape = SubResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="Platform2"]
visible = false
mesh = SubResource( 4 )
material/0 = null

[node name="Platform3" type="StaticBody" parent="."]
transform = Transform( 2, 0, 0, 0, 1, 0, 0, 0, 1, -26, 10, 0 )

[node name="CollisionShape" type="CollisionShape" parent="Platform3"]
shape = SubResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="Platform3"]
visible = false
mesh = SubResource( 4 )
material/0 = null

[node name="LeftInvisibleWall" type="StaticBody" parent="."]
transform = Transform( -3.0598e-07, 1, 0, -7, -4.37114e-08, 0, 0, 0, 1, -61, 34, 0 )

[node name="CollisionShape" type="CollisionShape" parent="LeftInvisibleWall"]
shape = SubResource( 2 )

[node name="RigthInvisibleWall" type="StaticBody" parent="."]
transform = Transform( -3.0598e-07, 1, 0, -7, -4.37114e-08, 0, 0, 0, 1, 61, 34, 0 )

[node name="CollisionShape" type="CollisionShape" parent="RigthInvisibleWall"]
shape = SubResource( 2 )

[node name="Character1" parent="." instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -38.6114, 3.36097, 0 )
character_id = 1
body_material = ExtResource( 3 )
hat_material = ExtResource( 4 )

[node name="Character2" parent="." instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -13.5636, 3.36097, 0 )
character_id = 2
body_material = ExtResource( 5 )
hat_material = ExtResource( 6 )

[node name="Character3" parent="." instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 13.7916, 3.36097, 0 )
character_id = 3
body_material = ExtResource( 7 )
hat_material = ExtResource( 8 )

[node name="Character4" parent="." instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 38.4701, 3.90476, 0 )
character_id = 4
body_material = ExtResource( 9 )
hat_material = ExtResource( 10 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 6 )

[node name="Hand" parent="." instance=ExtResource( 11 )]
floating_path = NodePath("FloatingPath")
punching_path = NodePath("PunchingPath")

[node name="FloatingPath" type="Path" parent="Hand"]
curve = SubResource( 7 )

[node name="PunchingPath" type="Path" parent="Hand"]
curve = SubResource( 8 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 20, 125 )
current = true
fov = 30.0
far = 1000.0
script = SubResource( 9 )

[node name="OmniLight" type="OmniLight" parent="Camera"]
light_color = Color( 1, 0.909804, 0.756863, 1 )
light_energy = 2.12
omni_range = 132.8
omni_attenuation = 0.965937

[node name="ASSET" type="Spatial" parent="."]

[node name="transparent" type="MeshInstance" parent="ASSET"]
transform = Transform( 100, 0, 0, 0, -4.37114e-08, -50, 0, 1, -2.18557e-06, 0, 24.821, -0.722545 )
mesh = SubResource( 16 )
material/0 = null

[node name="Figurine" parent="ASSET" instance=ExtResource( 12 )]

[node name="background_objects_large" type="Spatial" parent="ASSET"]

[node name="background" parent="ASSET/background_objects_large" instance=ExtResource( 13 )]

[node name="stage" parent="ASSET/background_objects_large" instance=ExtResource( 14 )]

[node name="GENERAL" type="Spatial" parent="ASSET"]

[node name="Light" type="Spatial" parent="ASSET/GENERAL"]

[node name="OmniLight" type="OmniLight" parent="ASSET/GENERAL/Light"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 6.80127, 45.0664, -32.5694 )
light_color = Color( 1, 0.737255, 0.0352941, 1 )
light_energy = 1.98
omni_range = 84.2

[node name="OmniLight3" type="OmniLight" parent="ASSET/GENERAL/Light"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 6.80127, 4.28259, -18.3308 )
light_energy = 0.84
omni_range = 106.8
omni_attenuation = 2.63901

[node name="candy_cane" parent="ASSET" instance=ExtResource( 15 )]

[node name="background_gifts" parent="ASSET" instance=ExtResource( 16 )]

[node name="background_shrub" parent="ASSET" instance=ExtResource( 17 )]

[node name="weihnachtspyramide" parent="ASSET" instance=ExtResource( 18 )]
transform = Transform( 0.908463, 0, -0.417966, 0, 1, 0, 0.417966, 0, 0.908463, 40.6633, 15.7674, -25.7091 )

[node name="christmas_bag" parent="ASSET" instance=ExtResource( 19 )]

[node name="Timer" type="Timer" parent="."]
wait_time = 300.0
autostart = true
[connection signal="mainmenu" from="ingame_UI" to="." method="_on_ingame_UI_mainmenu"]
[connection signal="restart" from="ingame_UI" to="." method="_on_ingame_UI_restart"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
